<!DOCTYPE html>
<html>
<body>
    <div id="canvas_div" style="display: flex; flex-direction: column; width: 1000px; height: 1150px;">
        <canvas id="canvas" width="1000" height="1000"></canvas>
        <div style="display: flex; flex-direction: row; margin-top: 20px; justify-content: center;">
            <div id="circles" style="display: flex; flex-direction: row; align-items: center; justify-content: space-between; margin-top: 50px; height: 50px;">
                <div class="circle" style="width: 10px; height: 10px; border-radius: 50%; background: rgb(0, 0,0); margin-right: 20px" onclick="changeWidth('10')"></div>
                <div class="circle" style="width: 13px; height: 13px; border-radius: 50%; background: rgb(0, 0,0); margin-right: 20px" onclick="changeWidth('13')"></div>
                <div class="circle" style="width: 16px; height: 16px; border-radius: 50%; background: rgb(0, 0,0); margin-right: 20px;" onclick="changeWidth('16')"></div>
                <div class="circle" style="width: 19px; height: 19px; border-radius: 50%; background: rgb(0, 0,0); margin-right: 20px;" onclick="changeWidth('19')"></div>
            </div>

            <div class="grid-container" style="margin-left: 10px; margin-right: 20px;">
                <div class="grid-item" style="background: rgb(166, 64, 36)" onclick="changeColor('rgb(166, 64, 36)')"></div>
                <div class="grid-item" style="background:rgb(249, 160, 70)" onclick="changeColor('rgb(249, 160, 70)')"></div>
                <div class="grid-item" style="background:rgb(255, 229, 142)" onclick="changeColor('rgb(255, 229, 142)')"></div>
                <div class="grid-item" style="background:rgb(90, 118, 67)" onclick="changeColor('rgb(90, 118, 67)')"></div>
                <div class="grid-item" style="background:rgb(54, 64, 96)" onclick="changeColor('rgb(54, 64, 96)')"></div>
                <div class="grid-item" style="background:rgb(102, 94, 136)" onclick="changeColor('rgb(102, 94, 136)')"></div>
                <div class="grid-item" style="background:rgb(124, 83, 107)" onclick="changeColor('rgb(124, 83, 107)')"></div>
                <div class="grid-item" style="background:rgb(255, 255, 255)" onclick="changeColor('rgb(255, 255, 255)')"></div>
                
                <div class="grid-item" style="background:rgb(109, 27, 5)" onclick="changeColor('rgb(109, 27, 5)')"></div>
                <div class="grid-item" style="background:rgb(205, 113, 27)" onclick="changeColor('rgb(205, 113, 27)')"></div>
                <div class="grid-item" style="background:rgb(240, 190, 69)" onclick="changeColor('rgb(240, 190, 69)')"></div>
                <div class="grid-item" style="background:rgb(40, 55, 27)" onclick="changeColor('rgb(40, 55, 27)')"></div>
                <div class="grid-item" style="background:rgb(33, 39, 58)" onclick="changeColor('rgb(33, 39, 58)')"></div>
                <div class="grid-item" style="background:rgb(51, 46, 76)" onclick="changeColor('rgb(51, 46, 76)')"></div>
                <div class="grid-item" style="background:rgb(59, 30, 44)" onclick="changeColor('rgb(59, 30, 44)')"></div>
                <div class="grid-item" style="background:rgb(0, 0, 0)" onclick="changeColor('rgb(0, 0, 0)')"></div>
            </div>

            <button class="button" onclick="javascript:clearArea();return false;" style="border: 3px solid rgb(0, 0, 0); width: 150px; height: 75px; margin-right: 20px; margin-top: 35px; border-radius: 15px; background-color: rgb(195, 187, 194); font-family: 'Press Start 2P', system-ui; font-size: 15px;">CLEAR</button>
        </div>
        
        <style>
            .grid-container {
                display: grid;
                grid-template-columns: 70px 70px 70px 70px 70px 70px 70px 70px;
                grid-template-rows: 70px 70px 70px 70px 70px 70px 70px 70px;
                padding: 5px;
            }

            .grid-item {
                border: 3px solid rgb(0, 0, 0);
                padding: 5px;
                text-align: center;
                margin: 4px;
            }

            .grid-item:hover {
                cursor: pointer;
                transform: scale(1.3);
            }

            #canvas_div {
                text-align: center;
                display: block;
                margin-left: auto;
                margin-right: auto;
            }

            canvas {
                border: 4px solid black;
            }

            .circle:hover {
                cursor: pointer;
                transform: scale(1.5);
            }

            .button:hover {
                cursor: pointer;
                transform: scale(1.2);
            }
        </style>

        <script>
            const canvas = document.getElementById('canvas');
            const context = canvas.getContext('2d');
            let isDrawing = false;
            let x = 0;
            let y = 0;
            var offsetX;
            var offsetY;
            
            function startup() {
                canvas.addEventListener('mousedown', (e) => {
                    x = e.offsetX;
                    y = e.offsetY;
                    isDrawing = true;
                });
                
                canvas.addEventListener('mousemove', (e) => {
                    if (isDrawing) {
                        drawLine(context, x, y, e.offsetX, e.offsetY);
                        x = e.offsetX;
                        y = e.offsetY;
                    }
                });
                
                canvas.addEventListener('mouseup', (e) => {
                    if (isDrawing) {
                        drawLine(context, x, y, e.offsetX, e.offsetY);
                        x = 0;
                        y = 0;
                        isDrawing = false;
                    }
                });
                changeWidth('10');
            }
            
            document.addEventListener("DOMContentLoaded", startup);
            
            function drawLine(context, x1, y1, x2, y2) {
                const dx = x2 - x1;
                const dy = y2 - y1;
                const distance = Math.sqrt(dx * dx + dy * dy);

                const circleSpacing = context.lineWidth * 2;
                const circleRadius = context.lineWidth / 2;

                const maxCircles = Math.floor(distance / circleSpacing);
                
                if (maxCircles > 0) {
                    for (let i = 0; i <= maxCircles; i++) {
                        const t = i / maxCircles;
                        const cx = x1 + dx * t;
                        const cy = y1 + dy * t;

                        context.beginPath();
                        context.arc(cx, cy, circleRadius, 0, Math.PI * 2);
                        context.fillStyle = context.strokeStyle;
                        context.fill();
                    }
                }
            }
            
            function clearArea() {
                context.setTransform(1, 0, 0, 1, 0, 0);
                context.clearRect(0, 0, context.canvas.width, context.canvas.height);
            }
            
            function changeColor(color) {
                context.strokeStyle = color;
            }

            function changeWidth(width) {
                context.lineWidth = width;
            }

            function changeHeight(width) {
                context.lineHeight = width;
            }
        </script>
    </div>
</body>
</html>
